export const fadeIn = (direction = "up", delay = 0) => {
  return {
    hidden: {
      y: direction === "up" ? 40 : direction === "down" ? -40 : 0,
      x: direction === "left" ? 40 : direction === "right" ? -40 : 0,
      opacity: 0
    },
    show: {
      y: 0,
      x: 0,
      opacity: 1,
      transition: {
        type: "tween",
        duration: 0.8,
        delay,
        ease: [0.25, 0.25, 0.25, 0.75]
      }
    }
  };
};
export const staggerContainer = {
  hidden: {},
  show: {
    transition: {
      staggerChildren: 0.2
    }
  }
};
export const scaleIn = (delay = 0) => {
  return {
    hidden: {
      scale: 0.8,
      opacity: 0
    },
    show: {
      scale: 1,
      opacity: 1,
      transition: {
        type: "tween",
        duration: 0.6,
        delay,
        ease: [0.25, 0.25, 0.25, 0.75]
      }
    }
  };
};
export const slideIn = (direction, type, delay, duration) => {
  return {
    hidden: {
      x: direction === "left" ? "-100%" : direction === "right" ? "100%" : 0,
      y: direction === "up" ? "100%" : direction === "down" ? "-100%" : 0
    },
    show: {
      x: 0,
      y: 0,
      transition: {
        type,
        delay,
        duration,
        ease: "easeOut"
      }
    }
  };
};
export const float = {
  hidden: { y: 0 },
  animate: {
    y: [0, -10, 0],
    transition: {
      duration: 4,
      repeat: Infinity,
      repeatType: "loop"
    }
  }
};
export const textVariant = (delay = 0) => {
  return {
    hidden: {
      y: 50,
      opacity: 0
    },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        duration: 1.25,
        delay
      }
    }
  };
};
export const navVariants = {
  hidden: {
    opacity: 0,
    y: -50,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 140
    }
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 80,
      delay: 0.2
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyYW1lckFuaW1hdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFyaWFudHMgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuXG5leHBvcnQgY29uc3QgZmFkZUluID0gKFxuICBkaXJlY3Rpb246IFwidXBcIiB8IFwiZG93blwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIgfCBcIm5vbmVcIiA9IFwidXBcIixcbiAgZGVsYXk6IG51bWJlciA9IDBcbik6IFZhcmlhbnRzID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoaWRkZW46IHtcbiAgICAgIHk6IGRpcmVjdGlvbiA9PT0gXCJ1cFwiID8gNDAgOiBkaXJlY3Rpb24gPT09IFwiZG93blwiID8gLTQwIDogMCxcbiAgICAgIHg6IGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgPyA0MCA6IGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiID8gLTQwIDogMCxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgfSxcbiAgICBzaG93OiB7XG4gICAgICB5OiAwLFxuICAgICAgeDogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6IFwidHdlZW5cIixcbiAgICAgICAgZHVyYXRpb246IDAuOCxcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGVhc2U6IFswLjI1LCAwLjI1LCAwLjI1LCAwLjc1XSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzdGFnZ2VyQ29udGFpbmVyOiBWYXJpYW50cyA9IHtcbiAgaGlkZGVuOiB7fSxcbiAgc2hvdzoge1xuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yLFxuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3Qgc2NhbGVJbiA9IChkZWxheTogbnVtYmVyID0gMCk6IFZhcmlhbnRzID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoaWRkZW46IHtcbiAgICAgIHNjYWxlOiAwLjgsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgIH0sXG4gICAgc2hvdzoge1xuICAgICAgc2NhbGU6IDEsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICB0eXBlOiBcInR3ZWVuXCIsXG4gICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgIGRlbGF5LFxuICAgICAgICBlYXNlOiBbMC4yNSwgMC4yNSwgMC4yNSwgMC43NV0sXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2xpZGVJbiA9IChcbiAgZGlyZWN0aW9uOiBcInVwXCIgfCBcImRvd25cIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiLFxuICB0eXBlOiBcInR3ZWVuXCIgfCBcInNwcmluZ1wiLFxuICBkZWxheTogbnVtYmVyLFxuICBkdXJhdGlvbjogbnVtYmVyXG4pOiBWYXJpYW50cyA9PiB7XG4gIHJldHVybiB7XG4gICAgaGlkZGVuOiB7XG4gICAgICB4OiBkaXJlY3Rpb24gPT09IFwibGVmdFwiID8gXCItMTAwJVwiIDogZGlyZWN0aW9uID09PSBcInJpZ2h0XCIgPyBcIjEwMCVcIiA6IDAsXG4gICAgICB5OiBkaXJlY3Rpb24gPT09IFwidXBcIiA/IFwiMTAwJVwiIDogZGlyZWN0aW9uID09PSBcImRvd25cIiA/IFwiLTEwMCVcIiA6IDAsXG4gICAgfSxcbiAgICBzaG93OiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNlOiBcImVhc2VPdXRcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmbG9hdDogVmFyaWFudHMgPSB7XG4gIGhpZGRlbjogeyB5OiAwIH0sXG4gIGFuaW1hdGU6IHtcbiAgICB5OiBbMCwgLTEwLCAwXSxcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogNCxcbiAgICAgIHJlcGVhdDogSW5maW5pdHksXG4gICAgICByZXBlYXRUeXBlOiBcImxvb3BcIixcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IHRleHRWYXJpYW50ID0gKGRlbGF5OiBudW1iZXIgPSAwKTogVmFyaWFudHMgPT4ge1xuICByZXR1cm4ge1xuICAgIGhpZGRlbjoge1xuICAgICAgeTogNTAsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgIH0sXG4gICAgc2hvdzoge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgICAgIGR1cmF0aW9uOiAxLjI1LFxuICAgICAgICBkZWxheSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBuYXZWYXJpYW50czogVmFyaWFudHMgPSB7XG4gIGhpZGRlbjoge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgeTogLTUwLFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgICBzdGlmZm5lc3M6IDMwMCxcbiAgICAgIGRhbXBpbmc6IDE0MCxcbiAgICB9LFxuICB9LFxuICB2aXNpYmxlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB5OiAwLFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgICBzdGlmZm5lc3M6IDgwLFxuICAgICAgZGVsYXk6IDAuMixcbiAgICB9LFxuICB9LFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBRU8sYUFBTSxTQUFTLENBQ3BCLFlBQXVELE1BQ3ZELFFBQWdCLE1BQ0g7QUFDYixTQUFPO0FBQUEsSUFDTCxRQUFRO0FBQUEsTUFDTixHQUFHLGNBQWMsT0FBTyxLQUFLLGNBQWMsU0FBUyxNQUFNO0FBQUEsTUFDMUQsR0FBRyxjQUFjLFNBQVMsS0FBSyxjQUFjLFVBQVUsTUFBTTtBQUFB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